const {
    InfluxDB
} = require('@influxdata/influxdb-client')
const errorHandler = require("../middleware/errorHandler");
const token = '6XiORFqH3OjEVPJjkJT8wBq6eGRAYvbBbjCv_BmsJcPxIwjPnMMmW-D0TNi-RyPe3I99OSKOVkj3QO0Vlwg8DA=='
const org = 'ACTAQUA'
const client = new InfluxDB({
    url: 'http://influxdb.int.paul-cloud.de',
    token: token
})

const User = require("../models/User");

const queryApi = client.getQueryApi(org);
module.exports.build = async function (req, res) {

    const promise1 = new Promise(function (resolve, reject) {
        getData(resolve, reject);
    })

    // const promise2 = new Promise(function (resolve, reject) {
    //      getPoeData(resolve, reject);
    // })

    // const promise3 = new Promise(function (resolve, reject) {
    //     getSupData(resolve, reject);
    // })

    Promise.all([promise1])
        .then((values) => {

            const [pipes,sup,labels] = values[0]
            const tmp1 = buildDataSets(pipes)
            const tmp2 = buildDataSetsForSUP(sup)

            res.status(200).json({
                datasets:[...tmp1,...tmp2],
                labels: Array.from(labels)
            })

        }).catch((error) => {
            console.log(error)
            errorHandler(error)});


}

function getData(resolve, reject) {

    const query = `from(bucket: "PAUL")
      |> range(start: -7d)
      |> filter(fn: (r) => r["serial"] == "1118232953" or r["serial"] == "1121102674")
      |> filter(fn: (r) => r["application"] == "pwh")
      |> filter(fn: (r) => r["equipment"] == "pipe" or r["equipment"] == "sup")
      |> filter(fn: (r) => r["_field"] == "temp")
      |> aggregateWindow(every: 1h, fn: mean, createEmpty: false)
      |> yield(name: "mean")`

    let labels = new Set();
    let sup = {};
    let pipes = {};

    queryApi.queryRows(query, {
        next(row, tableMeta) {
            const o = tableMeta.toObject(row)
            labels.add(o._time.slice(5,20));
            if(o.equipment === 'sup'){
                if (!sup[o.address]) {
                    sup[o.address] = [];
                }
                sup[o.address].push((+o._value));
            } else if(o.equipment === 'pipe'){
                if (!pipes[o.address]) {
                    pipes[o.address] = [];
                }
                pipes[o.address].push((+o._value));
            }
        },
        error(error) {
            console.error(error)
            console.log('Finished ERROR')
            reject(error);
        },
        complete() {
            console.log('Finished SUCCESS')
            resolve([pipes,sup,labels]);
        },
    })
}


function getCData(resolve, reject) {
    const query = `from(bucket: "PAUL")
        |> range(start: 2020-04-14T00:00:00Z, stop: 2021-01-01T00:00:00Z)
        |> filter(fn: (r) => r["_measurement"] == "PAUL_v4" or r["_measurement"] == "PAUL_v3")
        |> filter(fn: (r) => r["ip"] == "100.99.216.29")
        |> filter(fn: (r) => r["application"] == "pwh")
        |> filter(fn: (r) => r["equipment"] == "c")
        |> filter(fn: (r) => r["_field"] == "temp")
        |> aggregateWindow(every: 24h, fn: mean, createEmpty: false)
        |> yield(name: "mean")`;

    let tempStorage = [];
    let c = {};
    queryApi.queryRows(query, {
        next(row, tableMeta) {
            const o = tableMeta.toObject(row)

            tempStorage.push((+o._value));

            if (!c[o.address]) {
                c[o.address] = [];
            }
            c[o.address].push((+o._value));
        },
        error(error) {
            console.error(error)
            console.log('Finished ERROR')
            reject(error);
        },
        complete() {
            console.log('Finished SUCCESS')
            resolve(c);
        },
    })
}


function getSupData(resolve, reject) {
    const query = `from(bucket: "PAUL")
        |> range(start: -7d)
        |> filter(fn: (r) => r["serial"] == "1118232953" or r["serial"] == "1121102674")
        |> filter(fn: (r) => r["application"] == "pwh")
        |> filter(fn: (r) => r["equipment"] == "sup")
        |> filter(fn: (r) => r["_field"] == "temp")
        |> aggregateWindow(every: 24h, fn: mean, createEmpty: false)
        |> yield(name: "mean")`

    let tempStorage = [];
    let sup = {};
    queryApi.queryRows(query, {
        next(row, tableMeta) {
            const o = tableMeta.toObject(row)

            tempStorage.push((+o._value));

            if (!sup[o.address]) {
                sup[o.address] = [];
            }
            sup[o.address].push((+o._value));
        },
        error(error) {
            console.error(error)
            console.log('Finished ERROR')
            reject(error);
        },
        complete() {
            console.log('Finished SUCCESS')
            resolve(sup);
        },
    })
}

function getPoeData(resolve, reject) {
    const query = `from(bucket: "PAUL")
        |> range(start: -7d)
        |> filter(fn: (r) => r["serial"] == "1118232953" or r["serial"] == "1121102674")
        |> filter(fn: (r) => r["application"] == "pwc")
        |> filter(fn: (r) => r["equipment"] == "poe")
        |> filter(fn: (r) => r["_field"] == "temp")
        |> aggregateWindow(every: 24h, fn: mean, createEmpty: false)
        |> yield(name: "mean")`

    let tempStorage = [];
    let sup = {};
    queryApi.queryRows(query, {
        next(row, tableMeta) {
            const o = tableMeta.toObject(row)

            tempStorage.push((+o._value));

            if (!sup[o.address]) {
                sup[o.address] = [];
            }
            sup[o.address].push((+o._value));
        },
        error(error) {
            console.error(error)
            console.log('Finished ERROR')
            reject(error);
        },
        complete() {
            console.log('Finished SUCCESS')
            resolve(sup);
        },
    })
}

function buildDataSets(sets) {
    const datasets = [];
    for(let set in sets) {
        datasets.push({
            "label": `${set}`,
            "data": sets[set],
            "borderColor": getRandomColor(),
            "fill": false,
            "cubicInterpolationMode": "monotone",
            "tension": 0.4,
            "pointRadius": 0,
            "borderWidth": 0.3
        })
    }
    return datasets
}
function buildDataSetsForC(sets) {
    const datasets = [];
    for(let set in sets) {
        datasets.push({
            "label": `${set}`,
            "data": sets[set],
            "borderColor": 	"blue",
            "fill": false,
            "cubicInterpolationMode": "monotone",
            "tension": 0.4,
            "pointRadius": 0,
            "borderWidth": 4,
            "borderDash": [7,3]
        })
    }
    return datasets
}

function buildDataSetsForSUP(sets) {
    const bc = ["#b20000","#ff4c4c"]
    const datasets = [];
    for(let set in sets) {
        datasets.push({
            "label": `${set}`,
            "data": sets[set],
            "borderColor": 	bc.pop(),
            "fill": false,
            "cubicInterpolationMode": "monotone",
            "tension": 0.4,
            "pointRadius": 0,
            "borderWidth": 2
        })
    }
    return datasets
}

function buildDataSetsForPOE(sets) {
    const bc = ["#16558F","#0583D2"]
    const datasets = [];
    for(let set in sets) {
        datasets.push({
            "label": `${set}`,
            "data": sets[set],
            "borderColor": bc.pop(),
            "fill": false,
            "cubicInterpolationMode": "monotone",
            "tension": 0.4,
            "pointRadius": 0,
            "borderWidth": 2
        })
    }
    return datasets
}



function getRandomColor(){
    const r = Math.floor(Math.random() * 255)
    const g = Math.floor(Math.random() * 255)
    const b = Math.floor(Math.random() * 255)
    //return `rgba(${r},${g},${b})`
    return "#4c4c4c"
}



